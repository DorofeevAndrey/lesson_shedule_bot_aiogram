from datetime import datetime
import re
from aiogram import F, types
from sqlalchemy import func
from config import ADMIN_ID
from database import get_db
from keyboards import (
    build_slots_time_keyboard,
    get_admin_calendar_keyboard,
    get_admin_keyboard,
    get_all_user_lesson_keyboard,
    get_back_to_signup_keyboard,
    get_lesson_info_keyboard,
    get_user_calendar_keyboard,
    get_user_keyboard,
)
from bot_instance import dp
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from models import TimeSlot, User
from sqlalchemy.orm import joinedload


# --- States ---
class ScheduleStates(StatesGroup):
    waiting_for_time = State()


# --- USER ---


@dp.callback_query(F.data == "sign_up")
async def add_schedule_handler(callback: types.CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å:",
        reply_markup=get_user_calendar_keyboard(),
    )


@dp.callback_query(F.data.startswith("view_calendar:"))
async def process_calendar_navigation(callback: types.CallbackQuery):
    await callback.answer()

    _, date_str = callback.data.split(":")
    year, month = map(int, date_str.split("-"))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å:",
        reply_markup=get_user_calendar_keyboard(year, month),
    )


@dp.callback_query(F.data.startswith("select_slot_date:"))
async def select_slot_date_handler(callback: types.CallbackQuery):
    await callback.answer()

    date_str = callback.data.split(":")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    db = next(get_db())
    try:

        admin = db.query(User).filter(User.telegram_id == ADMIN_ID).first()

        if not admin:
            await callback.message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –î–æ—Å—Ç–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
        slots = (
            db.query(TimeSlot)
            .filter(
                func.date(TimeSlot.start_time) == selected_date,
                TimeSlot.admin_id == admin.id,
                TimeSlot.is_booked == False,  # –¢–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            )
            .order_by(TimeSlot.start_time)
            .all()
        )

        if not slots:
            await callback.message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        keyboard = build_slots_time_keyboard(slots)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
            reply_markup=keyboard,
        )
    finally:
        db.close()


@dp.callback_query(F.data.startswith("select_slot:"))
async def select_slot_handler(callback: types.CallbackQuery):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    slot_id = int(callback.data.split(":")[1])

    db = next(get_db())
    try:
        # –ò—â–µ–º —Å–ª–æ—Ç –ø–æ ID
        slot = db.query(TimeSlot).filter(TimeSlot.id == slot_id).first()

        if not slot:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
        if slot.is_booked:
            await callback.message.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ —Å–ª–æ—Ç
        student = (
            db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        )

        if not student:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ª–µ student_id
        slot.student_id = student.id
        slot.is_booked = True  # –°–ª–æ—Ç —Ç–µ–ø–µ—Ä—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
        db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot.start_time.strftime('%H:%M')} - {slot.end_time.strftime('%H:%M')}."
        )

    finally:
        db.close()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é
    await callback.message.edit_reply_markup(reply_markup=get_user_calendar_keyboard())


@dp.callback_query(F.data == "my_lessons")
async def my_lessons_handler(callback: types.CallbackQuery):
    await callback.answer()

    db = next(get_db())
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lessons = (
            db.query(TimeSlot)
            .filter(TimeSlot.student_id == user.id)
            .order_by(TimeSlot.start_time)
            .all()
        )

        if not lessons:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è üìö",
                reply_markup=get_back_to_signup_keyboard(),
            )
            return

        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω—è—Ç–∏–π
        keyboard = get_all_user_lesson_keyboard(lessons)

        await callback.message.edit_text("–í–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)

    finally:
        db.close()


@dp.callback_query(F.data.startswith("lesson_info:"))
async def lesson_info_handler(callback: types.CallbackQuery):
    await callback.answer()

    lesson_id = int(callback.data.split(":")[1])

    db = next(get_db())
    try:
        lesson = (
            db.query(TimeSlot)
            .options(joinedload(TimeSlot.admin))
            .filter(TimeSlot.id == lesson_id)
            .first()
        )

        if not lesson:
            await callback.message.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        start_time = lesson.start_time.strftime("%Y-%m-%d %H:%M")
        end_time = lesson.end_time.strftime("%H:%M")
        subject = lesson.subject if lesson.subject else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        teacher_name = lesson.admin.first_name if lesson.admin else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        text = (
            f"üìö <b>–¢–µ–º–∞:</b> {subject}\n"
            f"üë®‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {teacher_name}\n"
            f"üóì <b>–î–∞—Ç–∞:</b> {start_time} - {end_time}\n"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_lesson_info_keyboard(lesson.id),
            parse_mode="HTML",
        )

    finally:
        db.close()


@dp.callback_query(F.data.startswith("cancel_lesson:"))
async def cancel_lesson_handler(callback: types.CallbackQuery):
    await callback.answer()

    lesson_id = int(callback.data.split(":")[1])
    db = next(get_db())

    try:
        lesson = db.query(TimeSlot).filter(TimeSlot.id == lesson_id).first()

        if not lesson:
            await callback.message.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        user_id = (
            db.query(User).filter(User.telegram_id == callback.from_user.id).first().id
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —é–∑–µ—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª
        if lesson.student_id != user_id:
            await callback.message.answer("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ.")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å
        lesson.is_booked = False
        lesson.student_id = None
        db.commit()

        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å ‚úÖ")
        await my_lessons_handler(callback)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π
    finally:
        db.close()


@dp.callback_query(F.data == "about_us")
async def about_us_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ú—ã - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ —É–¥–æ–±–Ω—ã–º!")


# --- ADMIN ---


@dp.callback_query(F.data == "add_schedule")
async def add_schedule_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        reply_markup=get_admin_calendar_keyboard(),
    )


@dp.callback_query(F.data.startswith("change_month:"))
async def change_month_handler(callback: types.CallbackQuery):
    _, year_month = callback.data.split(":")
    year, month = map(int, year_month.split("-"))
    await callback.message.edit_reply_markup(
        reply_markup=get_admin_calendar_keyboard(year, month)
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("select_date:"))
async def select_date_handler(callback: types.CallbackQuery, state: FSMContext):
    _, date_str = callback.data.split(":")
    await state.update_data(selected_date=date_str)
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM - HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00 - 13:00.",
        reply_markup=None,
    )
    await state.set_state(ScheduleStates.waiting_for_time)
    await callback.answer()


@dp.message(ScheduleStates.waiting_for_time)
async def process_time_input(message: types.Message, state: FSMContext):
    time_pattern = re.compile(r"^\d{2}:\d{2} - \d{2}:\d{2}$")
    if not time_pattern.match(message.text):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM - HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00 - 13:00."
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        date_str = data["selected_date"]

        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        start_time_str, end_time_str = message.text.split(" - ")
        date_format = "%Y-%m-%d %H:%M"

        start_datetime = datetime.strptime(f"{date_str} {start_time_str}", date_format)
        end_datetime = datetime.strptime(f"{date_str} {end_time_str}", date_format)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        admin_id = (
            db.query(User).filter(User.telegram_id == message.from_user.id).first().id
        )
        new_slot = TimeSlot(
            start_time=start_datetime,
            end_time=end_datetime,
            is_booked=False,
            admin_id=admin_id,
        )
        db.add(new_slot)
        db.commit()

        await message.answer(
            f"–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {date_str} {message.text}",
            reply_markup=get_admin_keyboard(),
        )
    except ValueError as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        )
    finally:
        await state.clear()


@dp.callback_query(F.data == "view_schedule")
async def view_schedule_handler(callback: types.CallbackQuery):
    await callback.answer()

    db = next(get_db())

    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not admin:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª —ç—Ç–æ—Ç –∞–¥–º–∏–Ω
        slots = (
            db.query(TimeSlot)
            .options(joinedload(TimeSlot.student))
            .filter(TimeSlot.admin_id == admin.id)
            .order_by(TimeSlot.start_time)
            .all()
        )

        if not slots:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
        builder = InlineKeyboardBuilder()

        for slot in slots:
            start = slot.start_time.strftime("%Y-%m-%d %H:%M")
            end = slot.end_time.strftime("%H:%M")
            if slot.is_booked and slot.student:
                student_info = (
                    f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ {slot.student.first_name} @{slot.student.username}"
                )
            else:
                student_info = "–°–≤–æ–±–æ–¥–Ω–æ"

            button_text = f"{start} - {end} | {student_info}"
            builder.button(
                text=button_text,
                callback_data=f"delete_slot:{slot.id}",  # –ü–µ—Ä–µ–¥–∞–µ–º id —Å–ª–æ—Ç–∞
            )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")

        builder.adjust(1)

        await callback.message.answer(
            "–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç):",
            reply_markup=builder.as_markup(),
        )

    finally:
        db.close()


@dp.callback_query(F.data.startswith("delete_slot:"))
async def delete_slot_handler(callback: types.CallbackQuery):
    await callback.answer()

    slot_id = int(callback.data.split(":")[1])

    db = next(get_db())

    try:
        slot = db.query(TimeSlot).filter(TimeSlot.id == slot_id).first()

        if not slot:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        db.delete(slot)
        db.commit()

        await callback.message.answer("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω ‚úÖ")
    finally:
        db.close()

    await view_schedule_handler(callback)


# --- ALL ---


@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery):
    await callback.answer()

    # –í–µ—Ä–Ω—É—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if callback.from_user.id == ADMIN_ID:
        await callback.message.edit_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_keyboard(),
        )
    else:
        await callback.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=get_user_keyboard()
        )


@dp.callback_query(F.data == "ignore")
async def ignore_callback(callback: types.CallbackQuery):
    await callback.answer()
