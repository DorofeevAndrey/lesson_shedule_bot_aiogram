import calendar
from datetime import date, datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F, types
from sqlalchemy import func

from config import ADMIN_ID
from database import get_db
from models import TimeSlot, User

from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_schedule"
                ),
                InlineKeyboardButton(
                    text="üóìÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule"
                ),
            ]
        ]
    )
    return keyboard


def get_user_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="sign_up")],
            [InlineKeyboardButton(text="üóìÔ∏è –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è", callback_data="my_lessons")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")],
        ]
    )
    return keyboard


def get_user_calendar_keyboard() -> InlineKeyboardMarkup:
    db = next(get_db())
    now = datetime.now()
    min_date = now.date()
    max_date = (now + timedelta(days=365)).date()
    admin = db.query(User).filter(User.telegram_id == ADMIN_ID).first()

    if not admin:
        db.close()
        raise ValueError("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
    slots_dates = (
        db.query(func.date(TimeSlot.start_time))
        .filter(
            TimeSlot.start_time >= min_date,
            TimeSlot.start_time <= max_date,
            TimeSlot.admin_id == admin.id,
            TimeSlot.is_booked == False,
        )
        .all()
    )
    db.close()

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ set –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
    available_dates = set(d[0] for d in slots_dates)

    # –°—Ç—Ä–æ–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    year = now.year
    month = now.month
    month_cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]
    header = f"{month_name} {year}"

    keyboard = []
    keyboard.append([InlineKeyboardButton(text=header, callback_data="ignore")])

    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append(
        [InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days]
    )

    for week in month_cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(
                    InlineKeyboardButton(text=" ", callback_data="ignore")
                )
            else:
                current_date = date(year, month, day)
                if current_date in available_dates:
                    week_buttons.append(
                        InlineKeyboardButton(
                            text=str(day),
                            callback_data=f"select_slot_date:{current_date}",
                        )
                    )
                else:
                    week_buttons.append(
                        InlineKeyboardButton(text=" ", callback_data="ignore")
                    )
        keyboard.append(week_buttons)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append(
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_slots_time_keyboard(slots: list[TimeSlot]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    for slot in slots:
        time_text = slot.start_time.strftime("%H:%M")
        builder.button(text=time_text, callback_data=f"select_slot:{slot.id}")

    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="sign_up")

    builder.adjust(2)  # –Ω–∞–ø—Ä–∏–º–µ—Ä 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    return builder.as_markup()


def get_all_user_lesson_keyboard(lessons):
    builder = InlineKeyboardBuilder()

    for lesson in lessons:
        start_str = lesson.start_time.strftime("%Y-%m-%d %H:%M")
        end_str = lesson.end_time.strftime("%H:%M")
        builder.button(
            text=f"{start_str} - {end_str}",
            callback_data=f"lesson_info:{lesson.id}",  # –ú–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∑–∞–Ω—è—Ç–∏—é
        )

    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥

    return builder.as_markup()


def get_lesson_info_keyboard(lesson_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_lesson:{lesson_id}"
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="my_lessons")
    builder.adjust(1)
    return builder.as_markup()


def get_admin_calendar_keyboard(
    year: int = None, month: int = None
) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è: —Ç–æ–ª—å–∫–æ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –º–∞–∫—Å–∏–º—É–º –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥"""
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    min_date = now.date()  # –°–µ–≥–æ–¥–Ω—è
    max_date = (now + timedelta(days=365)).date()  # +1 –≥–æ–¥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—è—Ü –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    selected_first_day = date(year, month, 1)
    if selected_first_day < min_date.replace(day=1):
        year = now.year
        month = now.month
    if selected_first_day > max_date.replace(day=1):
        year = max_date.year
        month = max_date.month

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    month_cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]
    header = f"{month_name} {year}"

    keyboard = []
    keyboard.append([InlineKeyboardButton(text=header, callback_data="ignore")])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append(
        [InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days]
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    for week in month_cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(
                    InlineKeyboardButton(text=" ", callback_data="ignore")
                )
            else:
                current_date = date(year, month, day)
                if min_date <= current_date <= max_date:
                    date_str = f"{year}-{month:02d}-{day:02d}"
                    week_buttons.append(
                        InlineKeyboardButton(
                            text=str(day), callback_data=f"select_date:{date_str}"
                        )
                    )
                else:
                    week_buttons.append(
                        InlineKeyboardButton(text=" ", callback_data="ignore")
                    )
        keyboard.append(week_buttons)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –≥–æ–¥)
    nav_buttons = []

    if date(year, month, 1) > min_date.replace(day=1):
        # –õ–∏—Å—Ç–∞—Ç—å –Ω–∞–∑–∞–¥ –º–æ–∂–Ω–æ, –Ω–æ –Ω–µ –¥–æ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        if date(prev_year, prev_month, 1) >= min_date.replace(day=1):
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è", callback_data=f"change_month:{prev_year}-{prev_month}"
                )
            )

    if date(year, month, 1) < max_date.replace(day=1):
        # –õ–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä—ë–¥ –º–æ–∂–Ω–æ
        next_month = month + 1 if month < 12 else 1
        next_year = year if month < 12 else year + 1
        if date(next_year, next_month, 1) <= max_date.replace(day=1):
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è", callback_data=f"change_month:{next_year}-{next_month}"
                )
            )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append(
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)
