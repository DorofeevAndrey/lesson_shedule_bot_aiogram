import asyncio
from aiogram import Router

from datetime import datetime

from aiogram import F, types
from sqlalchemy import func
from sqlalchemy.orm import joinedload

from config import ADMIN_ID
from database import get_db
from keyboards.admin_keyboards import get_admin_accept_or_reject_slot_keyboard
from keyboards.common_keyboards import (
    get_back_to_menu_keyboard,
    get_ok_to_menu_keyboard,
)
from models import TimeSlot, User
from bot_instance import bot


from keyboards.user_keyboards import (
    get_all_user_lesson_keyboard,
    get_back_to_user_signup_keyboard,
    get_slots_time_user_keyboard,
    get_user_calendar_keyboard,
    get_user_lesson_info_keyboard,
)

user_router = Router()


@user_router.callback_query(F.data == "sign_up")
async def add_schedule_handler(callback: types.CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å:",
        reply_markup=get_user_calendar_keyboard(),
    )


@user_router.callback_query(F.data.startswith("view_calendar:"))
async def process_calendar_navigation(callback: types.CallbackQuery):
    await callback.answer()

    _, date_str = callback.data.split(":")
    year, month = map(int, date_str.split("-"))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å:",
        reply_markup=get_user_calendar_keyboard(year, month),
    )


@user_router.callback_query(F.data.startswith("select_slot_date:"))
async def select_slot_date_handler(callback: types.CallbackQuery):
    await callback.answer()

    date_str = callback.data.split(":")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    db = next(get_db())
    try:

        admin = db.query(User).filter(User.telegram_id == ADMIN_ID).first()

        if not admin:
            await callback.message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –î–æ—Å—Ç–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
        slots = (
            db.query(TimeSlot)
            .filter(
                func.date(TimeSlot.start_time) == selected_date,
                TimeSlot.admin_id == admin.id,
                TimeSlot.is_booked == False,  # –¢–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            )
            .order_by(TimeSlot.start_time)
            .all()
        )

        if not slots:
            await callback.message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        keyboard = get_slots_time_user_keyboard(slots)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
            reply_markup=keyboard,
        )
    finally:
        db.close()


@user_router.callback_query(F.data.startswith("select_slot:"))
async def select_slot_handler(callback: types.CallbackQuery):
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    slot_id = int(callback.data.split(":")[1])

    db = next(get_db())
    try:
        # –ò—â–µ–º —Å–ª–æ—Ç –ø–æ ID
        slot = db.query(TimeSlot).filter(TimeSlot.id == slot_id).first()

        if not slot:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
        if slot.is_booked:
            await callback.message.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ —Å–ª–æ—Ç
        student = (
            db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        )

        if not student:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ª–µ student_id
        slot.student_id = student.id
        slot.is_booked = False  # –ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–∏–µ
        db.commit()
        await callback.message.edit_text(
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª–æ—Ç {slot.start_time.strftime('%d-%m-%Y %H:%M')} - {slot.end_time.strftime('%H:%M')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            reply_markup=get_ok_to_menu_keyboard(),
        )
        user_link = f"tg://openmessage?user_id={1387661016}"
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª–æ—Ç:\n"
            f"–î–∞—Ç–∞: {slot.start_time.strftime('%d-%m-%Y %H:%M')}\n"
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç: @{student.username}\n",
            reply_markup=get_admin_accept_or_reject_slot_keyboard(slot_id),
        )
        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        # await callback.message.edit_text(
        #     f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot.start_time.strftime('%d-%m-%Y %H:%M')} - {slot.end_time.strftime('%H:%M')}."
        # )

    finally:
        db.close()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é
    # await callback.message.edit_reply_markup(reply_markup=get_user_calendar_keyboard())


@user_router.callback_query(F.data == "my_lessons")
async def my_lessons_handler(callback: types.CallbackQuery):
    await callback.answer()

    db = next(get_db())
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lessons = (
            db.query(TimeSlot)
            .filter(TimeSlot.student_id == user.id)
            .filter(TimeSlot.is_booked == True)
            .order_by(TimeSlot.start_time)
            .all()
        )

        if not lessons:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è üìö",
                reply_markup=get_back_to_user_signup_keyboard(),
            )
            return

        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω—è—Ç–∏–π
        keyboard = get_all_user_lesson_keyboard(lessons)

        await callback.message.edit_text("–í–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)

    finally:
        db.close()


@user_router.callback_query(F.data.startswith("lesson_info:"))
async def lesson_info_handler(callback: types.CallbackQuery):
    await callback.answer()

    lesson_id = int(callback.data.split(":")[1])

    db = next(get_db())
    try:
        lesson = (
            db.query(TimeSlot)
            .options(joinedload(TimeSlot.admin))
            .filter(TimeSlot.id == lesson_id)
            .first()
        )

        if not lesson:
            await callback.message.edit_text(
                "–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_back_to_menu_keyboard()
            )
            return

        start_time = lesson.start_time.strftime("%d-%m-%Y %H:%M")
        end_time = lesson.end_time.strftime("%H:%M")
        subject = lesson.subject if lesson.subject else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        teacher_name = lesson.admin.first_name if lesson.admin else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        text = (
            # f"üìö <b>–¢–µ–º–∞:</b> {subject}\n"
            # f"üë®‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {teacher_name}\n"
            f"üóì <b>–î–∞—Ç–∞:</b> {start_time} - {end_time}\n"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_user_lesson_info_keyboard(lesson.id),
            parse_mode="HTML",
        )

    finally:
        db.close()


@user_router.callback_query(F.data.startswith("cancel_lesson:"))
async def cancel_lesson_handler(callback: types.CallbackQuery):
    await callback.answer()

    lesson_id = int(callback.data.split(":")[1])
    db = next(get_db())

    try:
        lesson = db.query(TimeSlot).filter(TimeSlot.id == lesson_id).first()

        if not lesson:
            await callback.message.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —é–∑–µ—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª
        if lesson.student_id != user.id:
            await callback.message.answer("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ.")
            return
        start = lesson.start_time.strftime("%d-%m-%Y %H:%M")
        end = lesson.end_time.strftime("%H:%M")
        date_str = f"{start} - {end}"

        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å
        lesson.is_booked = False
        lesson.student_id = None
        db.commit()

        await callback.message.edit_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å ‚úÖ", reply_markup=get_ok_to_menu_keyboard()
        )

        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"@{user.username} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {date_str}",
        )

        # await my_lessons_handler(callback)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π
    finally:
        db.close()


@user_router.callback_query(F.data == "about_us")
async def about_us_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ú—ã - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ —É–¥–æ–±–Ω—ã–º!")
