import calendar
from datetime import date, datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_admin_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_schedule")
    builder.button(text="üóìÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")
    builder.adjust(1)
    return builder.as_markup()


def get_admin_calendar_keyboard(
    year: int = None, month: int = None
) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è: —Ç–æ–ª—å–∫–æ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –º–∞–∫—Å–∏–º—É–º –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥"""
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    min_date = now.date()  # –°–µ–≥–æ–¥–Ω—è
    max_date = (now + timedelta(days=365)).date()  # +1 –≥–æ–¥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—è—Ü –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    selected_first_day = date(year, month, 1)
    if selected_first_day < min_date.replace(day=1):
        year = now.year
        month = now.month
    if selected_first_day > max_date.replace(day=1):
        year = max_date.year
        month = max_date.month

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    month_cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]
    header = f"{month_name} {year}"

    keyboard = []
    keyboard.append([InlineKeyboardButton(text=header, callback_data="ignore")])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append(
        [InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days]
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    for week in month_cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(
                    InlineKeyboardButton(text=" ", callback_data="ignore")
                )
            else:
                current_date = date(year, month, day)
                if min_date <= current_date <= max_date:
                    date_str = f"{day:02d}-{month:02d}-{year}"
                    week_buttons.append(
                        InlineKeyboardButton(
                            text=str(day), callback_data=f"select_date:{date_str}"
                        )
                    )
                else:
                    week_buttons.append(
                        InlineKeyboardButton(text=" ", callback_data="ignore")
                    )
        keyboard.append(week_buttons)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –≥–æ–¥)
    nav_buttons = []

    if date(year, month, 1) > min_date.replace(day=1):
        # –õ–∏—Å—Ç–∞—Ç—å –Ω–∞–∑–∞–¥ –º–æ–∂–Ω–æ, –Ω–æ –Ω–µ –¥–æ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        if date(prev_year, prev_month, 1) >= min_date.replace(day=1):
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è", callback_data=f"change_month:{prev_year}-{prev_month}"
                )
            )

    if date(year, month, 1) < max_date.replace(day=1):
        # –õ–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä—ë–¥ –º–æ–∂–Ω–æ
        next_month = month + 1 if month < 12 else 1
        next_year = year if month < 12 else year + 1
        if date(next_year, next_month, 1) <= max_date.replace(day=1):
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è", callback_data=f"change_month:{next_year}-{next_month}"
                )
            )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append(
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_shedule_slots_keyboard(slots):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
    builder = InlineKeyboardBuilder()

    for slot in slots:
        start = slot.start_time.strftime("%d-%m-%Y %H:%M")
        end = slot.end_time.strftime("%H:%M")
        if slot.student:
            if slot.is_booked:
                student_info = f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            else:
                student_info = f"–í –æ–∂–∏–¥–∞–Ω–∏–∏"

        else:
            student_info = "–°–≤–æ–±–æ–¥–Ω–æ"

        button_text = f"{start} - {end} | {student_info}"
        builder.button(
            text=button_text,
            callback_data=f"selected_slot:{slot.id}",  # –ü–µ—Ä–µ–¥–∞–µ–º id —Å–ª–æ—Ç–∞
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")

    builder.adjust(1)
    return builder.as_markup()


def get_admin_delete_selected_slot_keyboard(slot_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"delete_slot:{slot_id}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_schedule")
    builder.adjust(1)
    return builder.as_markup()


def get_admin_cancel_selected_slot_keyboard(slot_id):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫", callback_data=f"cansel_user_selected_slot:{slot_id}"
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_schedule")
    builder.adjust(1)
    return builder.as_markup()


def get_admin_accept_or_reject_slot_keyboard(slot_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"is_booked_slot:{slot_id}")
    builder.button(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cancel_booked_slot:{slot_id}")
    builder.adjust(1)
    return builder.as_markup()
